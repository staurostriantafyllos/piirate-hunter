services:
  rabbitmq:
    image: rabbitmq:4-management
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 2s
      retries: 10

  redis:
    image: redis:latest
    ports:
      - "6379:6379"

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file: .env
    command: ["server", "/data", "--console-address", ":9001"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${MINIO_ENDPOINT}/minio/health/live"]
      interval: 5s
      timeout: 2s
      retries: 10

  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    env_file: .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME}"]
      interval: 5s
      timeout: 2s
      retries: 10

  api:
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    image: pii
    ports:
      - "8000:8000"
    env_file: .env
    command: ["uvicorn", "app.api.main:app", "--host", "0.0.0.0", "--port", "8000"]

  setup:
    image: pii
    depends_on:
      - api
    env_file: .env
    command: ["python", "-m", "scripts.setup_services"]

  forwarding:
    depends_on:
      rabbitmq:
        condition: service_healthy
    image: pii
    env_file: .env
    command: ["python", "-m", "app.workers.forward"]

  ocr:
    depends_on:
      rabbitmq:
        condition: service_healthy
    image: pii
    env_file: .env
    command: ["python", "-m", "app.workers.ocr"]

  filtering:
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    image: pii
    env_file: .env
    command: ["python", "-m", "app.workers.filter"]

networks:
  default:
    name: my_network
